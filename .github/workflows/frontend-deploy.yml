## ワークフロー名: Frontend Deploy
## 説明: frontend ディレクトリの変更や infra の変更が push されたときに実行される
## このワークフローはテスト → イメージビルド → ACR に push → Container App にデプロイ の順に処理します。
name: Frontend Deploy

on:
  # push イベント（main ブランチのみ）でトリガーします。
  # paths にヒットしたファイル変更がある場合のみ実行されます。
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'     # frontend ソース／テスト／Dockerfile の変更で実行
      - 'infra/**'        # インフラ構成（Bicep 等）の変更で実行
      - '.github/workflows/frontend-deploy.yml' # このワークフローファイル自身の変更で実行
  # 手動トリガー（Actions タブから実行）を許可
  workflow_dispatch: {}

concurrency:
  # 同一ブランチの同時実行を抑制します。古い実行はキャンセルされます。
  group: frontend-deploy-${{ github.ref_name }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  ACR_NAME: ${{ vars.ACR_NAME }}
  RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
  FRONTEND_IMAGE_REPO: frontend
  FRONTEND_APP_NAME: ${{ vars.FRONTEND_APP_NAME }}
  IMAGE_TAG: ${{ github.sha }}
  # NODE_VERSION: CI 実行で利用する Node.js のバージョンを固定します。
  # FRONTEND_IMAGE_REPO: ACR 内のリポジトリ名
  # FRONTEND_APP_NAME: デプロイ対象の Container App 名（リポジトリ変数で設定）
  # IMAGE_TAG: コミット SHA を使うことで各ビルドが一意のタグになります。

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # fetch-depth: 0 にすると完全な履歴（すべてのコミット）を取得します。
          # SHA を正確に扱ったり、過去履歴を参照する処理がある場合に用います。

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      # setup-node による Node.js セットアップと npm キャッシュの有効化。
      # cache-dependency-path は package-lock.json に依存する変更でキャッシュを再生成します。

      - name: Install deps
        working-directory: frontend
        run: npm ci
      # npm ci は CI 環境向けのクリーンな依存関係インストールです。package-lock.json に厳密に従います。

      - name: Type check
        working-directory: frontend
        run: npm run typecheck

      - name: Lint
        working-directory: frontend
        run: npm run lint -- --max-warnings=0
      # lint は --max-warnings=0 で警告も失敗扱いにして品質を保ちます。

      - name: Unit tests
        working-directory: frontend
        run: npm test
      # ユニットテスト（vitest 等）。ここで失敗するとビルド／デプロイは中断されます。

  build-deploy:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          # Azure へログインするステップ。
          # ここではクライアントID／テナントID／サブスクリプションID を Secrets から渡しています。
          # （別途 OIDC を使う設定に変更することも可能です）
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: ACR Login
        run: az acr login --name $ACR_NAME
      # ACR に対して docker push するために az CLI でログインします。
      # (az acr login はローカル docker に対して認証情報を設定します)

      - name: Build Frontend Image
        run: |
          # Docker イメージをビルドします。タグに ACR の FQDN と IMAGE_TAG（コミット SHA）を付与します。
          docker build -f frontend/Dockerfile -t $ACR_NAME.azurecr.io/$FRONTEND_IMAGE_REPO:$IMAGE_TAG ./frontend

      - name: Push Image
        run: docker push $ACR_NAME.azurecr.io/$FRONTEND_IMAGE_REPO:$IMAGE_TAG
      # イメージを ACR に push します。後続ステップでこのイメージを Container App にデプロイします。

      - name: Deploy / Update Frontend Container App
        run: |
          az containerapp update \
            --name $FRONTEND_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --image $ACR_NAME.azurecr.io/$FRONTEND_IMAGE_REPO:$IMAGE_TAG
      # Container Apps のコンテナを更新するコマンドです。
      # 既存の Container App を更新する想定なので、必要に応じて 'az containerapp create' に置き換えてください。

      - name: Output Image Ref
        run: echo "IMAGE=$ACR_NAME.azurecr.io/$FRONTEND_IMAGE_REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT
      # このステップは他のジョブや後続処理にイメージ参照を渡すための出力を設定します。

      - name: Summary
        run: echo "Deployed $FRONTEND_APP_NAME with image tag $IMAGE_TAG" >> $GITHUB_STEP_SUMMARY
      # GitHub Actions のジョブサマリにデプロイ結果を追記します（Actions の UI にわかりやすく表示されます）。
